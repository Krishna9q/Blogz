name: Build and Push to AWS ECR

on:
  push:
    branches:
      - master # Change this to the branch you want to trigger the workflow

jobs:
  build-and-push:
    name: Build and Push Docker Image to AWS ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Change this to your AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Environment Variables
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: node-app  # Change this to your ECR repository name
          IMAGE_TAG: latest
        run: echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV

      - name: Delete Previous Latest Image
        run: |
          # Find and delete the existing "latest" tag
          IMAGE_EXISTS=$(aws ecr list-images --repository-name $ECR_REPOSITORY --query 'imageIds[?imageTag==`latest`]' --output text)
          
          if [ -n "$IMAGE_EXISTS" ]; then
            echo "Deleting existing latest image..."
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=latest
          else
            echo "No existing latest image found. Skipping deletion."
          fi

      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: node-app  # Change this to your ECR repository name
          IMAGE_TAG: latest  # Change if needed
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
